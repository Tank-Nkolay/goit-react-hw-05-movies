{"version":3,"file":"static/js/139.b4953882.chunk.js","mappings":"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","sources":["api/movieApi.js","components/Loader/Loader.styled.jsx","components/Loader/Loader.js","pages/Cast/Cast.styled.jsx","pages/Cast/Cast.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst paramsTraiding = 'trending/movie/day?';\nconst SEARCH_URL = 'search/movie?';\n\nconst API_KEY = 'api_key=ca2a773c1a5457f1c3e0c6f68586d44e';\nconst lang = 'language=en-US';\n\nexport async function fetchTraidingFilms() {\n  const { data } = await axios.get(`/${paramsTraiding}${API_KEY}`);\n\n  return data;\n}\n\nexport async function fetchFilmsById(id) {\n  const { data } = await axios.get(`/movie/${id}?${lang}&${API_KEY}`);\n\n  return data;\n}\n\nexport async function fetchSearchFilms(query) {\n  const { data } = await axios.get(`/${SEARCH_URL}&query=${query}&${API_KEY}`);\n\n  return data;\n}\n\nexport async function fetchFilmsCast(id) {\n  const { data } = await axios.get(`/movie/${id}/credits?${lang}&${API_KEY}`);\n\n  return data;\n}\n\nexport async function fetchFilmsReview(id) {\n  const { data } = await axios.get(`/movie/${id}/reviews?${lang}&${API_KEY}`);\n\n  return data;\n}\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 10%;\n`;\n","import { ThreeDots } from 'react-loader-spinner';\nimport { Container } from './Loader.styled';\n\nexport default function Loader() {\n  return (\n    <Container>\n      <ThreeDots\n        height=\"200\"\n        width=\"200\"\n        radius=\"9\"\n        color=\"#386bd1\"\n        ariaLabel=\"three-dots-loading\"\n        wrapperStyle={{}}\n        wrapperClassName=\"\"\n        visible={true}\n      />\n    </Container>\n  );\n}\n","import { Link } from 'react-router-dom';\nimport styled from '@emotion/styled';\n\nexport const MainWrapper = styled.div`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 10px;\n  margin-top: 10px;\n  margin-bottom: 0;\n  padding: 0;\n  padding-bottom: 20px;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const AddInfo = styled.div`\n  padding-bottom: 20px;\n  display: flex;\n  flex-wrap: wrap;\n  border-radius: 4px;\n  box-shadow: 0px 4px 4px 0px #00000040;\n  justify-content: center;\n`;\n\nexport const Img = styled.img`\n  width: 50px;\n  padding-left: 20px;\n  padding-top: 10px;\n\n  border-radius: 5px;\n  margin-right: 10px;\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const NameTitle = styled.p`\n  font-size: 16px;\n  font-weight: 700;\n  margin-bottom: 10px;\n  padding-top: 5px;\n  padding-right: 5px;\n`;\n\nexport const CharacterTitle = styled.p`\n  font-size: 16px;\n  font-weight: 700;\n  margin-bottom: 5px;\n  font-style: italic;\n`;\n\nexport const Character = styled.p`\n  font-size: 16px;\n  line-height: 1.17;\n  color: #000000;\n`;\n\nexport const DisabledLink = styled(Link)`\n  pointer-events: none;\n`;\n","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchFilmsCast } from '../../api/movieApi';\nimport Loader from '../../components/Loader/Loader';\nimport toast, { Toaster } from 'react-hot-toast';\nimport images from '../../images/noPicture.png';\nimport {\n  AddInfo,\n  Img,\n  NameTitle,\n  Character,\n  CharacterTitle,\n  Wrapper,\n  MainWrapper,\n  DisabledLink,\n} from './Cast.styled';\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\n  useEffect(() => {\n    async function fetchMovieCast(movieId) {\n      try {\n        setIsLoading(true);\n        const response = await fetchFilmsCast(movieId);\n        const castList = response.cast;\n        if (castList.length === 0) {\n          toast('We don`t have any cast for this movie');\n          return;\n        }\n        setCast(castList);\n      } catch {\n        setError('Can`t load movies!');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchMovieCast(movieId);\n  }, [movieId]);\n\n  useEffect(() => {\n    if (error !== false) {\n      toast.error(error);\n    }\n  }, [error]);\n\n  if (!cast) {\n    return null;\n  }\n  return (\n    <MainWrapper>\n      {isLoading && <Loader />}\n      {cast.map(({ id, character, original_name, profile_path }) => {\n        return (\n          <AddInfo key={id}>\n            <DisabledLink to={'movies'}>\n              {profile_path ? (\n                <Img src={IMG_URL + profile_path} alt={original_name} />\n              ) : (\n                <Img src={images} alt={original_name} />\n              )}\n\n              <Wrapper>\n                <NameTitle>{original_name}</NameTitle>\n                <CharacterTitle>Character:</CharacterTitle>\n                <Character>{character}</Character>\n              </Wrapper>\n            </DisabledLink>\n          </AddInfo>\n        );\n      })}\n\n      <Toaster />\n    </MainWrapper>\n  );\n}\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      character: PropTypes.string.isRequired,\n      original_name: PropTypes.string.isRequired,\n      profile_path: PropTypes.string.isRequired,\n    })\n  ),\n};\n"],"names":["axios","paramsTraiding","SEARCH_URL","API_KEY","lang","fetchTraidingFilms","data","fetchFilmsById","id","fetchSearchFilms","query","fetchFilmsCast","fetchFilmsReview","Container","styled","Loader","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","MainWrapper","AddInfo","Img","Wrapper","NameTitle","CharacterTitle","Character","DisabledLink","Link","Cast","movieId","useParams","useState","cast","setCast","error","setError","isLoading","setIsLoading","useEffect","response","castList","length","toast","fetchMovieCast","map","character","original_name","profile_path","to","src","alt","images"],"sourceRoot":""}