{"version":3,"file":"static/js/820.0d61c696.chunk.js","mappings":"mTAEAA,EAAAA,GAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAiB,sBACjBC,EAAa,gBAEbC,EAAU,2CACVC,EAAO,iBAEN,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sGACkBL,EAAAA,GAAAA,IAAA,WAAcC,GAAd,OAA+BE,IADjD,uBACGG,EADH,EACGA,KADH,kBAGEA,GAHF,kEAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,yFACkBR,EAAAA,GAAAA,IAAA,iBAAoBQ,EAApB,YAA0BJ,EAA1B,YAAkCD,IADpD,uBACGG,EADH,EACGA,KADH,kBAGEA,GAHF,kEAMA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,yFACkBV,EAAAA,GAAAA,IAAA,WAAcE,EAAd,kBAAkCQ,EAAlC,YAA2CP,IAD7D,uBACGG,EADH,EACGA,KADH,kBAGEA,GAHF,kEAMA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA8BH,GAA9B,yFACkBR,EAAAA,GAAAA,IAAA,iBAAoBQ,EAApB,oBAAkCJ,EAAlC,YAA0CD,IAD5D,uBACGG,EADH,EACGA,KADH,kBAGEA,GAHF,kEAMA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAgCJ,GAAhC,yFACkBR,EAAAA,GAAAA,IAAA,iBAAoBQ,EAApB,oBAAkCJ,EAAlC,YAA0CD,IAD5D,uBACGG,EADH,EACGA,KADH,kBAGEA,GAHF,kE,0GC/BMO,EAAKC,EAAAA,EAAAA,GAAH,4RAgBFC,EAAWD,EAAAA,EAAAA,IAAH,6dAwBRE,EAAMF,EAAAA,EAAAA,IAAH,sFAMHG,EAAaH,EAAAA,EAAAA,GAAH,0R,4BCzCR,SAASI,EAAT,GAA+B,IAAVC,EAAS,EAATA,MAC5BC,GAAWC,EAAAA,EAAAA,MAGjB,OACE,SAACR,EAAD,UACGM,GACCA,EAAMG,KAAI,gBAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,MAAOhB,EAAvB,EAAuBA,GAAvB,OACR,SAAC,KAAD,CAEEiB,GAAE,WAAMC,EAAAA,EAAAA,OAAN,YAAuBlB,GACzBmB,MAAO,CAAEC,KAAMR,GAHjB,UAKE,UAACL,EAAD,WACGQ,GACC,SAACP,EAAD,CAAKa,IAbH,kCAakBN,EAAaO,IAAKN,KAEtC,SAACR,EAAD,CAAKa,IAAKE,EAAQD,IAAKN,KAGzB,UAACP,EAAD,eAAcO,SAXXhB,EAFC,KAmBjB,C,gFC/BYwB,E,QAAYlB,EAAAA,IAAH,0F,SCCP,SAASmB,IACtB,OACE,SAACD,EAAD,WACE,SAAC,KAAD,CACEE,OAAO,MACPC,MAAM,MACNC,OAAO,IACPC,MAAM,UACNC,UAAU,qBACVC,aAAc,CAAC,EACfC,iBAAiB,GACjBC,SAAS,KAIhB,C,qJCdYC,EAAmB,WAC9B,OAA0CC,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAyBA,OAvBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,sGAEID,GAAa,GAFjB,UAG2B5C,EAAAA,EAAAA,MAH3B,OAGU8C,EAHV,OAIUhC,EAAQgC,EAASC,QACvBP,EAAiB1B,GALrB,gDAOI4B,EAAS,sBAPb,yBASIE,GAAa,GATjB,6EADc,uBAAC,WAAD,wBAcdI,EACD,GAAE,KAEHH,EAAAA,EAAAA,YAAU,YACM,IAAVJ,GACFQ,EAAAA,GAAAA,MAAYR,EAEf,GAAE,CAACA,IAEG,CAAEF,cAAAA,EAAeI,UAAAA,EACzB,E,oBC3BYO,EAAkB,WAC7B,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0Bb,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOe,EAAP,KAAcC,EAAd,KACA,GAA0BhB,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACMW,GAAWC,EAAAA,EAAAA,MAyBjB,OAvBAX,EAAAA,EAAAA,YAAU,WAAM,wCACd,WAA4BM,GAA5B,uFAEIP,GAAa,GAFjB,SAG2Ba,EAAAA,GAAuBN,GAHlD,OAGUL,EAHV,OAIIQ,EAASR,GAJb,gDAMIJ,EAAS,sBACTa,EAASlC,EAAAA,EAAAA,KAAa,CAAEqC,SAAS,IAPrC,yBASId,GAAa,GATjB,4EADc,yBAAC,SAAD,2BAcde,CAAaR,EACd,GAAE,CAACA,EAASI,KAEbV,EAAAA,EAAAA,YAAU,YACM,IAAVJ,GACFQ,EAAAA,GAAAA,MAAYR,EAEf,GAAE,CAACA,IAEG,CAAEY,MAAAA,EAAOV,UAAAA,EACjB,C,sICnCYiB,EAAQnD,EAAAA,EAAAA,GAAH,+MAWLoD,EAAcpD,EAAAA,EAAAA,IAAH,qG,SCPT,SAASqD,IACtB,OAAqCzB,EAAAA,EAAAA,KAA7BE,EAAR,EAAQA,cAAeI,EAAvB,EAAuBA,UAEvB,OACE,gCACGA,IAAa,SAACf,EAAA,EAAD,KAEd,SAACgC,EAAD,8BAEA,SAACC,EAAD,WACE,SAAChD,EAAA,EAAD,CAAWC,MAAOyB,OAGpB,SAAC,KAAD,MAGL,C","sources":["api/movieApi.js","components/ListFilms/ListFilms.styled.jsx","components/ListFilms/ListFilms.js","components/Loader/Loader.styled.jsx","components/Loader/Loader.js","hooks/useTrendingFilms.jsx","hooks/useMovieDetails.jsx","pages/Home/Home.styled.jsx","pages/Home/Home.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst paramsTraiding = 'trending/movie/day?';\nconst SEARCH_URL = 'search/movie?';\n\nconst API_KEY = 'api_key=ca2a773c1a5457f1c3e0c6f68586d44e';\nconst lang = 'language=en-US';\n\nexport async function fetchTraidingFilms() {\n  const { data } = await axios.get(`/${paramsTraiding}${API_KEY}`);\n\n  return data;\n}\n\nexport async function fetchFilmsById(id) {\n  const { data } = await axios.get(`/movie/${id}?${lang}&${API_KEY}`);\n\n  return data;\n}\n\nexport async function fetchSearchFilms(query) {\n  const { data } = await axios.get(`/${SEARCH_URL}&query=${query}&${API_KEY}`);\n\n  return data;\n}\n\nexport async function fetchFilmsCast(id) {\n  const { data } = await axios.get(`/movie/${id}/credits?${lang}&${API_KEY}`);\n\n  return data;\n}\n\nexport async function fetchFilmsReview(id) {\n  const { data } = await axios.get(`/movie/${id}/reviews?${lang}&${API_KEY}`);\n\n  return data;\n}\n","import styled from '@emotion/styled';\n\nexport const Ul = styled.ul`\n  display: flex;\n  gap: 30px;\n  flex-wrap: wrap;\n  justify-content: center;\n  max-width: calc(100vw - 48px);\n\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 20px;\n`;\n\nexport const FilmCard = styled.div`\n  width: 280px;\n  padding-bottom: 20px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  border-radius: 4px;\n  box-shadow: 0px 4px 4px 0px #00000040;\n\n  &:hover,\n  &:focus {\n    box-shadow: 0px 4px 4px 0px #00000040;\n    transition: 0.5s ease all;\n    transform: scale(1.05);\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 336px;\n  }\n  @media screen and (min-width: 1280px) {\n    max-width: 395px;\n  }\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n  border-radius: 5px;\n  margin-bottom: 8px;\n`;\n\nexport const MovieTitle = styled.h2`\n  font-weight: 20px;\n  line-height: 1.17;\n  text-transform: uppercase;\n  color: #0e0f69;\n\n  @media screen and (min-width: 768px) {\n    line-height: 1.3;\n  }\n  @media screen and (min-width: 1280px) {\n    line-height: 1.2;\n    font-size: 20px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Ul, FilmCard, Img, MovieTitle } from './ListFilms.styled';\n\nimport images from '../../images/noPicture.png';\nimport { routes } from 'routes';\n\nexport default function ListFilms({ films }) {\n  const location = useLocation();\n  const IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\n  return (\n    <Ul>\n      {films &&\n        films.map(({ poster_path, title, id }) => (\n          <Link\n            key={id}\n            to={`/${routes.MOVIES}/${id}`}\n            state={{ from: location }}\n          >\n            <FilmCard>\n              {poster_path ? (\n                <Img src={IMG_URL + poster_path} alt={title} />\n              ) : (\n                <Img src={images} alt={title} />\n              )}\n\n              <MovieTitle> {title}</MovieTitle>\n            </FilmCard>\n          </Link>\n        ))}\n    </Ul>\n  );\n}\n\nListFilms.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n    })\n  ),\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 10%;\n`;\n","import { ThreeDots } from 'react-loader-spinner';\nimport { Container } from './Loader.styled';\n\nexport default function Loader() {\n  return (\n    <Container>\n      <ThreeDots\n        height=\"200\"\n        width=\"200\"\n        radius=\"9\"\n        color=\"#386bd1\"\n        ariaLabel=\"three-dots-loading\"\n        wrapperStyle={{}}\n        wrapperClassName=\"\"\n        visible={true}\n      />\n    </Container>\n  );\n}\n","import { fetchTraidingFilms } from '../api/movieApi';\nimport { useEffect, useState } from 'react';\nimport toast from 'react-hot-toast';\n\nexport const useTrendingFilms = () => {\n  const [trendingFilms, setTrendingFilms] = useState([]);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    async function fetchMovie() {\n      try {\n        setIsLoading(true);\n        const response = await fetchTraidingFilms();\n        const films = response.results;\n        setTrendingFilms(films);\n      } catch {\n        setError('Can`t load movies!');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    fetchMovie();\n  }, []);\n\n  useEffect(() => {\n    if (error !== false) {\n      toast.error(error);\n    }\n  }, [error]);\n\n  return { trendingFilms, isLoading };\n};\n","import { useEffect, useState } from 'react';\nimport toast from 'react-hot-toast';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport * as SERVICE from '../api/movieApi';\nimport { routes } from 'routes';\n\nexport const useMovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState({});\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    async function fetchMovieID(movieId) {\n      try {\n        setIsLoading(true);\n        const response = await SERVICE.fetchFilmsById(movieId);\n        setMovie(response);\n      } catch {\n        setError('Can`t load movies!');\n        navigate(routes.HOME, { replace: true });\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    fetchMovieID(movieId);\n  }, [movieId, navigate]);\n\n  useEffect(() => {\n    if (error !== false) {\n      toast.error(error);\n    }\n  }, [error]);\n\n  return { movie, isLoading };\n};\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h1`\n  padding-bottom: 10px;\n  padding-top: 10px;\n  display: flex;\n  justify-content: center;\n  font-size: 36px;\n  color: #0e0f69;\n  font-weight: 600;\n  background-color: #f7f7f7;\n`;\n\nexport const MainSection = styled.div`\n  background-color: #f7f7f7;\n  padding-top: 20px;\n  padding-bottom: 40px;\n`;\n","import ListFilms from 'components/ListFilms/ListFilms';\nimport Loader from 'components/Loader/Loader';\nimport { useTrendingFilms } from 'hooks';\nimport { Toaster } from 'react-hot-toast';\nimport { MainSection, Title } from './Home.styled';\n\nexport default function Home() {\n  const { trendingFilms, isLoading } = useTrendingFilms();\n\n  return (\n    <>\n      {isLoading && <Loader />}\n\n      <Title>Trending today</Title>\n\n      <MainSection>\n        <ListFilms films={trendingFilms} />\n      </MainSection>\n\n      <Toaster />\n    </>\n  );\n}\n"],"names":["axios","paramsTraiding","SEARCH_URL","API_KEY","lang","fetchTraidingFilms","data","fetchFilmsById","id","fetchSearchFilms","query","fetchFilmsCast","fetchFilmsReview","Ul","styled","FilmCard","Img","MovieTitle","ListFilms","films","location","useLocation","map","poster_path","title","to","routes","state","from","src","alt","images","Container","Loader","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","useTrendingFilms","useState","trendingFilms","setTrendingFilms","error","setError","isLoading","setIsLoading","useEffect","response","results","fetchMovie","toast","useMovieDetails","movieId","useParams","movie","setMovie","navigate","useNavigate","SERVICE","replace","fetchMovieID","Title","MainSection","Home"],"sourceRoot":""}